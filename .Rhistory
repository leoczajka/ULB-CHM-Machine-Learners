results <- list("df_test" = df_test , "model_forest" = model_forest, "error" = error)
return(results)
}
list_results <- lapply(1:10, subsets) #Generate data
for (i in 1:10){
print(list_results[[i]][3]$error)
}
library(xgboost)
library(tidyverse)
library(dplyr)
library(caret)
library(xgboost)
?predict
?train
train$random <- runif(nrow(train), min=1, max=60000)
train$subset <-  ntile(train$random, 10)
bst_model_1 <- function(some_number) {
df_train <- train %>% filter(train$subset == some_number)
df_test <- train %>% filter(train$subset != some_number)
model_bst <- train(as.factor(status_group) ~
+ gps_height  + date_recorded
+ longitude + latitude + management
+ extraction_type_group
+ water_quality + quantity + source
+ waterpoint_type ,
data = df_train,
method = "xgbTree")
df_test$y_pred <- predict(model_bst, df_test)
error <- sum(df_test$y_pred!=df_test$status_group)/nrow(df_test)
results <- list("df_test" = df_test , "model_bst" = model_bst, "error" = error)
return(results)
}
list_results <- lapply(1:1, rf_model_1) #Generate data
for (i in 1:10){
print(list_results[[i]][3]$error)
}
bst_model_1 <- function(some_number) {
df_train <- train %>% filter(train$subset == some_number)
df_test <- train %>% filter(train$subset != some_number)
model_bst <- train(as.factor(status_group) ~
+ gps_height  + date_recorded
+ longitude + latitude + management
+ extraction_type_group
+ water_quality + quantity + source
+ waterpoint_type ,
data = df_train,
method = "xgbTree")
df_test$y_pred <- predict(model_bst, df_test)
error <- sum(df_test$y_pred!=df_test$status_group)/nrow(df_test)
results <- list("df_test" = df_test , "model_bst" = model_bst, "error" = error)
return(results)
}
list_results <- lapply(1:1, bst_model_1) #Generate data
for (i in 1:10){
print(list_results[[i]][3]$error)
}
train$random_100 <- runif(nrow(train), min=1, max=60000)
train$subset_100 <-  ntile(train$random_100, 100)
train_100 %>% filter(train$subset_100 == 1)
train_100 <- train %>% filter(train$subset_100 == 1)
bst_model_1 <- function(some_number) {
df_train <- train_100 %>% filter(train_100$subset == some_number)
df_test <- train_100 %>% filter(train_100$subset != some_number)
model_bst <- train(as.factor(status_group) ~
+ gps_height  + date_recorded
+ longitude + latitude + management
+ extraction_type_group
+ water_quality + quantity + source
+ waterpoint_type ,
data = df_train,
method = "xgbTree")
df_test$y_pred <- predict(model_bst, df_test)
error <- sum(df_test$y_pred!=df_test$status_group)/nrow(df_test)
results <- list("df_test" = df_test , "model_bst" = model_bst, "error" = error)
return(results)
}
list_results <- lapply(1:1, bst_model_1) #Generate data
for (i in 1:10){
print(list_results[[i]][3]$error)
}
nrow(train_100)
model_bst <- train(as.factor(status_group) ~
+ gps_height  + date_recorded
+ longitude + latitude + management
+ extraction_type_group
+ water_quality + quantity + source
+ waterpoint_type ,
data = train_100,
method = "xgbTree")
model_bst <- train(as.factor(status_group) ~
+ gps_height,
method = "xgbTree")
model_bst <- train(as.factor(status_group) ~
+ gps_height  + date_recorded
+ longitude  ,
data = train_100,
method = "xgbTree")
data("PimaIndiansDiabetes2", package = "mlbench")
train(as.factor(status_group) ~
+ gps_height  + date_recorded
+ longitude  ,
data = train_100,
method = "xgbTree")
)
)
data("PimaIndiansDiabetes2", package = "mlbench")
PimaIndiansDiabetes2 <- na.omit(PimaIndiansDiabetes2)
# Inspect the data
sample_n(PimaIndiansDiabetes2, 3)
# Split the data into training and test set
set.seed(123)
training.samples <- PimaIndiansDiabetes2$diabetes %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- PimaIndiansDiabetes2[training.samples, ]
test.data <- PimaIndiansDiabetes2[-training.samples, ]
set.seed(123)
model <- train(
diabetes ~., data = train.data, method = "xgbTree",
trControl = trainControl("cv", number = 10)
)
# Best tuning parameter
model$bestTune
View(train.data)
nrow(train.data)
data("PimaIndiansDiabetes2", package = "mlbench")
PimaIndiansDiabetes2 <- na.omit(PimaIndiansDiabetes2)
# Inspect the data
sample_n(PimaIndiansDiabetes2, 3)
# Split the data into training and test set
set.seed(123)
training.samples <- PimaIndiansDiabetes2$diabetes %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- PimaIndiansDiabetes2[training.samples, ]
test.data <- PimaIndiansDiabetes2[-training.samples, ]
set.seed(123)
model <- train(
diabetes ~., data = train.data, method = "xgbTree"
)
# Best tuning parameter
model$bestTune
predicted.classes <- model %>% predict(test.data)
mean(predicted.classes == test.data$diabetes)
train.data$diabetes
table(train.data$diabetes)
nrow(train_100)
nrow(train.data)
data("PimaIndiansDiabetes2", package = "mlbench")
PimaIndiansDiabetes2 <- na.omit(PimaIndiansDiabetes2)
# Inspect the data
sample_n(PimaIndiansDiabetes2, 3)
# Split the data into training and test set
set.seed(123)
training.samples <- PimaIndiansDiabetes2$diabetes %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- PimaIndiansDiabetes2[training.samples, ]
test.data <- PimaIndiansDiabetes2[-training.samples, ]
set.seed(123)
model <- train(
diabetes ~., data = train.data, method = "xgbTree"
)
# Best tuning parameter
train$random_100 <- runif(nrow(train), min=1, max=60000)
train$subset_100 <-  ntile(train$random_100, 200)
train_100 <- train %>% filter(train$subset_100 == 1)
nrow(train_100
)
model_bst <- train(as.factor(status_group) ~
+ gps_height   ,
data = train_100,
method = "xgbTree")
model_bst$bestTune
model_bst <- train(as.factor(status_group) ~
+ quantity,
data = train_100,
method = "xgbTree")
df <- df %>% filter(df$construction_year!=0)
df <- df %>% filter(df$population>1)
df <- df %>% filter(df$amount_tsh>0)
nrow(df)
table(df$status_group)
df_gbt <- df %>% filter(df$construction_year!=0)
df_gbt <- df_gbt %>% filter(df_gbt$population>1)
df_gbt <- df_gbt %>% filter(df_gbt$amount_tsh>0)
df_gbt$random <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset <-  ntile(df_gbt$random, 200)
table(train$subset)
table(df_gbt$subset)
df_gbt <- df %>% filter(df$construction_year!=0)
df_gbt <- df_gbt %>% filter(df_gbt$population>1)
df_gbt <- df_gbt %>% filter(df_gbt$amount_tsh>0)
df_gbt$random <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset <-  ntile(df_gbt$random, 100)
table(df_gbt$subset)
nrow(train.data)
# running time is extremely slow so we will restrict our sample
df_gbt <- df %>% filter(df$construction_year!=0)
df_gbt <- df_gbt %>% filter(df_gbt$population>1)
df_gbt <- df_gbt %>% filter(df_gbt$amount_tsh>0)
df_gbt$random_100 <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset_100 <-  ntile(df_gbt$random_100, 100)
df_gbt <- df_gbt %>% filter(df_gbt$subset_100 == 1)
df_gbt$random <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset <-  ntile(df_gbt$random, 10)
table(df_gbt$subset )
# running time is extremely slow so we will restrict our sample
df_gbt <- df %>% filter(df$construction_year!=0)
df_gbt <- df_gbt %>% filter(df_gbt$population>1)
df_gbt <- df_gbt %>% filter(df_gbt$amount_tsh>0)
df_gbt$random_100 <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset_100 <-  ntile(df_gbt$random_100, 100)
df_gbt <- df_gbt %>% filter(df_gbt$subset_100 == 1)
df_gbt$random <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset <-  ntile(df_gbt$random, 10)
gbt_model_1 <- function(some_number) {
df_train <- df_gbt %>% filter(df_gbt$subset == some_number)
df_test <- df_gbt %>% filter(df_gbt$subset != some_number)
model_bst <- train(as.factor(status_group) ~
+ gps_height
+ longitude + latitude,
data = df_train,
method = "xgbTree")
df_test$y_pred <- predict(model_gbt, df_test)
error <- sum(df_test$y_pred!=df_test$status_group)/nrow(df_test)
results <- list("df_test" = df_test , "model_gbt" = model_gbt, "error" = error)
return(results)
}
list_results <- lapply(1:1, gbt_model_1) #Generate data
for (i in 1:10){
print(list_results[[i]][3]$error)
}
nrow(df_gbt)
# running time is extremely slow so we will restrict our sample
df_gbt <- df %>% filter(df$construction_year!=0)
df_gbt <- df_gbt %>% filter(df_gbt$population>1)
df_gbt <- df_gbt %>% filter(df_gbt$amount_tsh>0)
df_gbt$random_100 <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset_100 <-  ntile(df_gbt$random_100, 100)
df_gbt <- df_gbt %>% filter(df_gbt$subset_100 < 3)
nrow(df_gbt)
df_gbt$random <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset <-  ntile(df_gbt$random, 10)
gbt_model_1 <- function(some_number) {
df_train <- df_gbt %>% filter(df_gbt$subset == some_number)
df_test <- df_gbt %>% filter(df_gbt$subset != some_number)
model_bst <- train(as.factor(status_group) ~
+ gps_height
+ longitude + latitude,
data = df_train,
method = "xgbTree")
df_test$y_pred <- predict(model_gbt, df_test)
error <- sum(df_test$y_pred!=df_test$status_group)/nrow(df_test)
results <- list("df_test" = df_test , "model_gbt" = model_gbt, "error" = error)
return(results)
}
list_results <- lapply(1:1, gbt_model_1) #Generate data
for (i in 1:10){
print(list_results[[i]][3]$error)
}
# running time is extremely slow so we will restrict our sample
df_gbt <- df %>% filter(df$construction_year!=0)
df_gbt <- df_gbt %>% filter(df_gbt$population>1)
df_gbt <- df_gbt %>% filter(df_gbt$amount_tsh>0)
df_gbt$random_100 <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset_100 <-  ntile(df_gbt$random_100, 100)
df_gbt <- df_gbt %>% filter(df_gbt$subset_100 < 3)
nrow(df_gbt)
df_gbt$random <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset <-  ntile(df_gbt$random, 10)
gbt_model_1 <- function(some_number) {
df_train <- df_gbt %>% filter(df_gbt$subset == some_number)
df_test <- df_gbt %>% filter(df_gbt$subset != some_number)
model_bst <- train(as.factor(status_group) ~
+ gps_height + population
+ longitude + latitude,
data = df_train,
method = "xgbTree")
df_test$y_pred <- predict(model_gbt, df_test)
error <- sum(df_test$y_pred!=df_test$status_group)/nrow(df_test)
results <- list("df_test" = df_test , "model_gbt" = model_gbt, "error" = error)
return(results)
}
list_results <- lapply(1:1, gbt_model_1) #Generate data
for (i in 1:10){
print(list_results[[i]][3]$error)
}
# running time is extremely slow so we will restrict our sample
df_gbt <- df %>% filter(df$construction_year!=0)
df_gbt <- df_gbt %>% filter(df_gbt$population>1)
df_gbt <- df_gbt %>% filter(df_gbt$amount_tsh>0)
df_gbt$random_100 <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset_100 <-  ntile(df_gbt$random_100, 100)
df_gbt <- df_gbt %>% filter(df_gbt$subset_100 < 4)
nrow(df_gbt)
df_gbt$random <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset <-  ntile(df_gbt$random, 10)
gbt_model_1 <- function(some_number) {
df_train <- df_gbt %>% filter(df_gbt$subset == some_number)
df_test <- df_gbt %>% filter(df_gbt$subset != some_number)
model_bst <- train(as.factor(status_group) ~
+ gps_height + population
+ longitude + latitude,
data = df_train,
method = "xgbTree")
df_test$y_pred <- predict(model_gbt, df_test)
error <- sum(df_test$y_pred!=df_test$status_group)/nrow(df_test)
results <- list("df_test" = df_test , "model_gbt" = model_gbt, "error" = error)
return(results)
}
list_results <- lapply(1:1, gbt_model_1) #Generate data
for (i in 1:10){
print(list_results[[i]][3]$error)
}
# running time is extremely slow so we will restrict our sample
df_gbt <- df %>% filter(df$construction_year!=0)
df_gbt <- df_gbt %>% filter(df_gbt$population>1)
df_gbt <- df_gbt %>% filter(df_gbt$amount_tsh>0)
df_gbt$random_100 <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset_100 <-  ntile(df_gbt$random_100, 100)
df_gbt <- df_gbt %>% filter(df_gbt$subset_100 < 4)
nrow(df_gbt)
df_gbt$random <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset <-  ntile(df_gbt$random, 10)
gbt_model_1 <- function(some_number) {
df_train <- df_gbt %>% filter(df_gbt$subset == some_number)
df_test <- df_gbt %>% filter(df_gbt$subset != some_number)
model_bst <- train(as.factor(status_group) ~
+ gps_height + population + quantity
+ longitude + latitude,
data = df_train,
method = "xgbTree")
df_test$y_pred <- predict(model_gbt, df_test)
error <- sum(df_test$y_pred!=df_test$status_group)/nrow(df_test)
results <- list("df_test" = df_test , "model_gbt" = model_gbt, "error" = error)
return(results)
}
list_results <- lapply(1:1, gbt_model_1) #Generate data
for (i in 1:10){
print(list_results[[i]][3]$error)
}
# running time is extremely slow so we will restrict our sample
df_gbt <- df %>% filter(df$construction_year!=0)
df_gbt <- df_gbt %>% filter(df_gbt$population>1)
df_gbt <- df_gbt %>% filter(df_gbt$amount_tsh>0)
df_gbt$random_100 <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset_100 <-  ntile(df_gbt$random_100, 100)
df_gbt <- df_gbt %>% filter(df_gbt$subset_100 < 4)
nrow(df_gbt)
df_gbt$random <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset <-  ntile(df_gbt$random, 10)
gbt_model_1 <- function(some_number) {
df_train <- df_gbt %>% filter(df_gbt$subset == some_number)
df_test <- df_gbt %>% filter(df_gbt$subset != some_number)
model_bst <- train(as.factor(status_group) ~
+ gps_height + population + quantity + water_quality
+ longitude + latitude,
data = df_train,
method = "xgbTree")
df_test$y_pred <- predict(model_gbt, df_test)
error <- sum(df_test$y_pred!=df_test$status_group)/nrow(df_test)
results <- list("df_test" = df_test , "model_gbt" = model_gbt, "error" = error)
return(results)
}
list_results <- lapply(1:1, gbt_model_1) #Generate data
for (i in 1:10){
print(list_results[[i]][3]$error)
}
df_gbt <- df %>% filter(df$construction_year!=0)
df_gbt <- df_gbt %>% filter(df_gbt$population>1)
df_gbt <- df_gbt %>% filter(df_gbt$amount_tsh>0)
df_gbt$random_100 <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset_100 <-  ntile(df_gbt$random_100, 100)
df_gbt <- df_gbt %>% filter(df_gbt$subset_100 < 4)
nrow(df_gbt)
df_gbt$random <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset <-  ntile(df_gbt$random, 10)
gbt_model_1 <- function(some_number) {
df_train <- df_gbt %>% filter(df_gbt$subset == some_number)
df_test <- df_gbt %>% filter(df_gbt$subset != some_number)
model_bst <- train(as.factor(status_group) ~
+ gps_height + population + quantity + water_quality
+ construction_year + longitude + latitude,
data = df_train,
method = "xgbTree")
df_test$y_pred <- predict(model_gbt, df_test)
error <- sum(df_test$y_pred!=df_test$status_group)/nrow(df_test)
results <- list("df_test" = df_test , "model_gbt" = model_gbt, "error" = error)
return(results)
}
list_results <- lapply(1:1, gbt_model_1) #Generate data
for (i in 1:10){
print(list_results[[i]][3]$error)
}
# running time is extremely slow so we will restrict our sample
df_gbt <- df %>% filter(df$construction_year!=0)
df_gbt <- df_gbt %>% filter(df_gbt$population>1)
df_gbt <- df_gbt %>% filter(df_gbt$amount_tsh>0)
df_gbt$random_100 <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset_100 <-  ntile(df_gbt$random_100, 100)
df_gbt <- df_gbt %>% filter(df_gbt$subset_100 < 6)
nrow(df_gbt)
# running time is extremely slow so we will restrict our sample
df_gbt <- df %>% filter(df$construction_year!=0)
df_gbt <- df_gbt %>% filter(df_gbt$population>1)
df_gbt <- df_gbt %>% filter(df_gbt$amount_tsh>0)
df_gbt$random_100 <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset_100 <-  ntile(df_gbt$random_100, 100)
df_gbt <- df_gbt %>% filter(df_gbt$subset_100 < 6)
nrow(df_gbt)
df_gbt$random <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset <-  ntile(df_gbt$random, 10)
gbt_model_1 <- function(some_number) {
df_train <- df_gbt %>% filter(df_gbt$subset == some_number)
df_test <- df_gbt %>% filter(df_gbt$subset != some_number)
model_bst <- train(as.factor(status_group) ~
+ gps_height + population + quantity + water_quality
+ construction_year + longitude + latitude,
data = df_train,
method = "xgbTree")
df_test$y_pred <- predict(model_gbt, df_test)
error <- sum(df_test$y_pred!=df_test$status_group)/nrow(df_test)
results <- list("df_test" = df_test , "model_gbt" = model_gbt, "error" = error)
return(results)
}
list_results <- lapply(1:1, gbt_model_1) #Generate data
for (i in 1:10){
print(list_results[[i]][3]$error)
}
list_results
# running time is extremely slow so we will restrict our sample
# keep var with
df_gbt <- df %>% filter(df$construction_year!=0)
df_gbt <- df_gbt %>% filter(df_gbt$population>1)
df_gbt <- df_gbt %>% filter(df_gbt$amount_tsh>0)
df_gbt$random_100 <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset_100 <-  ntile(df_gbt$random_100, 100)
df_gbt <- df_gbt %>% filter(df_gbt$subset_100 < 6)
nrow(df_gbt)
df_gbt$random <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset <-  ntile(df_gbt$random, 10)
gbt_model_1 <- function(some_number) {
df_train <- df_gbt %>% filter(df_gbt$subset == some_number)
df_test <- df_gbt %>% filter(df_gbt$subset != some_number)
model_gbt <- train(as.factor(status_group) ~
+ gps_height + population + quantity + water_quality
+ construction_year + longitude + latitude,
data = df_train,
method = "xgbTree")
df_test$y_pred <- predict(model_gbt, df_test)
error <- sum(df_test$y_pred!=df_test$status_group)/nrow(df_test)
results <- list("df_test" = df_test , "model_gbt" = model_gbt, "error" = error)
return(results)
}
list_results <- lapply(1:1, gbt_model_1) #Generate data
table(df$quantity)
# running time is extremely slow so we will restrict our sample
# keep var with
# common mistakes : "factor quantity has new levels unknown"
df_gbt <- df %>% filter(df$construction_year!=0)
df_gbt <- df_gbt %>% filter(df_gbt$population>1)
df_gbt <- df_gbt %>% filter(df_gbt$amount_tsh>0)
df_gbt$random_100 <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset_100 <-  ntile(df_gbt$random_100, 100)
df_gbt <- df_gbt %>% filter(df_gbt$subset_100 < 6)
nrow(df_gbt)
df_gbt$random <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset <-  ntile(df_gbt$random, 10)
gbt_model_1 <- function(some_number) {
df_train <- df_gbt %>% filter(df_gbt$subset == some_number)
df_test <- df_gbt %>% filter(df_gbt$subset != some_number)
model_gbt <- train(as.factor(status_group) ~
+ gps_height + population
+ construction_year + longitude + latitude,
data = df_train,
method = "xgbTree")
df_test$y_pred <- predict(model_gbt, df_test)
error <- sum(df_test$y_pred!=df_test$status_group)/nrow(df_test)
results <- list("df_test" = df_test , "model_gbt" = model_gbt, "error" = error)
return(results)
}
list_results <- lapply(1:1, gbt_model_1) #Generate data
for (i in 1:10){
print(list_results[[i]][3]$error)
}
# running time is extremely slow so we will restrict our sample
# keep var with
# common mistakes : "factor quantity has new levels unknown"
df_gbt <- df %>% filter(df$construction_year!=0)
df_gbt <- df_gbt %>% filter(df_gbt$population>1)
df_gbt <- df_gbt %>% filter(df_gbt$amount_tsh>0)
df_gbt$random_100 <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset_100 <-  ntile(df_gbt$random_100, 100)
df_gbt <- df_gbt %>% filter(df_gbt$subset_100 < 6)
nrow(df_gbt)
df_gbt$random <- runif(nrow(df_gbt), min=1, max=nrow(df_gbt))
df_gbt$subset <-  ntile(df_gbt$random, 10)
gbt_model_1 <- function(some_number) {
df_train <- df_gbt %>% filter(df_gbt$subset == some_number)
df_test <- df_gbt %>% filter(df_gbt$subset != some_number)
model_gbt <- train(as.factor(status_group) ~
+ gps_height + population
+ construction_year + longitude + latitude,
data = df_train,
method = "xgbTree")
df_test$y_pred <- predict(model_gbt, df_test)
error <- sum(df_test$y_pred!=df_test$status_group)/nrow(df_test)
results <- list("df_test" = df_test , "model_gbt" = model_gbt, "error" = error)
return(results)
}
list_results <- lapply(1:10, gbt_model_1) #Generate data
for (i in 1:10){
print(list_results[[i]][3]$error)
}
